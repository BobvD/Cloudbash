service: cloudbash


provider:
  name: aws
  runtime: dotnetcore3.1
  stage: dev
  region: us-east-1
  environment:   
    POSTGRESQL_HOST: ${self:custom.POSTGRESQL.HOST}
    POSTGRESQL_PORT: ${self:custom.POSTGRESQL.PORT}
    ServerlessConfiguration__ConfigName: ${self:custom.CONFIG_NAME}
    ServerlessConfiguration__EventBus: 'KINESIS'
    ServerlessConfiguration__Database: 'POSTGRES'
    ServerlessConfiguration__EventStoreTableName: ${self:custom.EVENT_STORE_NAME}
    ServerlessConfiguration__KinesisStreamName: ${self:custom.KINESIS_STREAM_NAME}
    ServerlessConfiguration__BucketName: ${self:custom.STATIC_FILE_S3_BUCKET_NAME}

  iamRoleStatements:
  # Grant privileges to read from kinesis stream
  - Effect: Allow
    Action:
    - kinesis:GetRecords
    - kinesis:GetShardIterator
    - kinesis:DescribeStream
    - kinesis:ListStreams
    - kinesis:PutRecord
    - kinesis:PutRecords
    Resource:
      Fn::GetAtt: 
      - eventStream
      - Arn
  # Grant privilege to write to events table 
  - Effect: Allow
    Action:
    - dynamodb:*
    Resource:
      Fn::GetAtt: 
      - eventStore
      - Arn     
  - Effect: Allow
    Action:
    - s3:*
    Resource:
      Fn::GetAtt: 
      - staticFileBucket
      - Arn 
  - Effect: Allow
    Action:
    - s3:*
    Resource:
      Fn::GetAtt: 
      - dataBucket
      - Arn 
  - Effect: Allow
    Action:
    - firehose:*
    Resource:
      Fn::GetAtt: 
      - firehose
      - Arn


custom:
  CONFIG_NAME: cb-c2
  EVENT_STORE_NAME: es-c2
  KINESIS_STREAM_NAME: eventStream
  DB_NAME: cloudbash
  USERNAME: master
  PASSWORD: password
  POSTGRESQL:
    HOST: 
        Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Address]
    PORT: 
        Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Port]
  scripts:
    commands:
      hello: echo Hello from ${self:service} service!
    hooks:
      'deploy:finalize': serverless invoke --function dbInit -d
  STATIC_FILE_S3_BUCKET_NAME: cb-c2
  DATA_S3_BUCKET_NAME: cb-c2-data

package:
  artifact: bin/release/netcoreapp3.1/deploy-package.zip

functions:

   # Concert Endpoints
  createConcert: ${file(./serverless/functions/concerts/create.yml)}
  getConcerts: ${file(./serverless/functions/concerts/get.yml)}
  getConcertDetail: ${file(./serverless/functions/concerts/get_detail.yml)}
  deleteConcert: ${file(./serverless/functions/concerts/delete.yml)} 
  createConcertTicketType: ${file(./serverless/functions/concerts/create_ticket_type.yml)}
   # Venue Endpoints
  createVenue: ${file(./serverless/functions/venues/create.yml)}
  getVenues: ${file(./serverless/functions/venues/get.yml)}
  # Cognito Triggers
  preSignUp: ${file(./serverless/functions/cognito/pre_signup.yml)} 
  postAuthentication: ${file(./serverless/functions/cognito/post_authentication.yml)} 
  postConfirmation: ${file(./serverless/functions/cognito/post_confirmation.yml)} 

  # lambda for catching events from the eventstream (kinesis)
  eventStreamHandler:
    handler: Cloudbash.Lambda::Cloudbash.Lambda.Events.Functions.Processor.KinesisEventProcessorFunction::Run

  # Dynamo Firehose to S3
  firehoseHandler:
    handler: Cloudbash.Lambda::Cloudbash.Lambda.Events.Functions.Firehose.DynamoToFirehose::Run
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - eventStore
              - StreamArn
          batchSize: 1

  # lambda for initiliazing the database on deployment
  dbInit:    
    handler: Cloudbash.Lambda::Cloudbash.Lambda.Functions.Util.DatabaseInitializerFunction::Run
    timeout: 180

# Resources
resources:
  Resources:

    # Cognito User Pool
    CloudbashCognitoUserPool: ${file(./serverless/resources/CognitoUserPool.yml)}
    # Cognito Client - lambda
    CloudbashCognitoUserPoolClient: ${file(./serverless/resources/CognitoUserPoolClient.yml)}
    # Cognito Client - Angular
    CloudbashCognitoUserPoolClientWeb: ${file(./serverless/resources/CognitoUserPoolClientWeb.yml)}

    # Internet Gateway
    CloudbashInternetGateway: ${file(./serverless/resources/InternetGateway.yml)}

    # Virtual Private Cloud
    CloudbashVPC: ${file(./serverless/resources/VPC.yml)}
    CloudbashVPCGA: ${file(./serverless/resources/VPCGA.yml)}

    # Subnets
    CloudbashSubnetA: ${file(./serverless/resources/SubnetA.yml)}
    CloudbashSubnetB: ${file(./serverless/resources/SubnetB.yml)}
    CloudbashSubnetC: ${file(./serverless/resources/SubnetC.yml)}

    # Subnet Group
    CloudbashRDSSubnetGroup: ${file(./serverless/resources/RDSSubnetGroup.yml)}

    # Security Group
    CloudbashSecurityGroup: ${file(./serverless/resources/SecurityGroup.yml)}
    
    # Routing
    RouteTablePublic: ${file(./serverless/resources/RouteTablePublic.yml)}
    RoutePublic: ${file(./serverless/resources/RoutePublic.yml)}
    RouteTableAssociationSubnetA: ${file(./serverless/resources/RouteTableAssociationSubnetA.yml)}
    RouteTableAssociationSubnetB: ${file(./serverless/resources/RouteTableAssociationSubnetB.yml)}
    RouteTableAssociationSubnetC: ${file(./serverless/resources/RouteTableAssociationSubnetC.yml)}
    
    CloudbashStorageSecurityGroup : ${file(./serverless/resources/StorageSecurityGroup.yml)}

    # POSTGRESQL RDS Database
    PostgreSqlRDSInstance: ${file(./serverless/resources/PostgresSQL.yml)}

    # S3 Bucket
    staticFileBucket: ${file(./serverless/resources/StaticFileS3Bucket.yml)}
    staticFileBucketPolicy: ${file(./serverless/resources/StaticFileS3BucketPolicy.yml)}

    # Kinesis Firehose    
    firehoseRole: ${file(./serverless/resources/KinesisFirehoseRole.yml)}
    firehose: ${file(./serverless/resources/KinesisFirehose.yml)}

    # Data S3 Bucket
    dataBucket: ${file(./serverless/resources/DataS3Bucket.yml)}
    dataBucketPolicy: ${file(./serverless/resources/DataS3BucketPolicy.yml)}

    # create the Kinesis EventStream
    eventStream: 
      Type: AWS::Kinesis::Stream
      Properties: 
        Name: eventStream
        ShardCount: 1

    Event:
      Type: AWS::Lambda::EventSourceMapping
      Properties:
        BatchSize: 50
        EventSourceArn:
          Fn::GetAtt:
            - eventStream
            - Arn      
        FunctionName:
          Fn::GetAtt:
            - EventStreamHandlerLambdaFunction
            - Arn
        StartingPosition: TRIM_HORIZON

    # Event Store = DynamoDB
    eventStore: ${file(./serverless/resources/DynamoDBEventStore.yml)}

    # Lambda Authorizer
    apiGatewayAuthorizer: ${file(./serverless/resources/ApiGatewayAuthorizer.yml)}

plugins:
  - serverless-plugin-scripts