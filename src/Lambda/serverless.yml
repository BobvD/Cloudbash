service: cloudbash


provider:
  name: aws
  runtime: dotnetcore2.1
  stage: dev
  region: us-east-1
  environment:   
    POSTGRESQL_HOST: ${self:custom.POSTGRESQL.HOST}
    POSTGRESQL_PORT: ${self:custom.POSTGRESQL.PORT}
       
  iamRoleStatements:
  # Grant privileges to read from kinesis stream
  - Effect: Allow
    Action:
    - kinesis:GetRecords
    - kinesis:GetShardIterator
    - kinesis:DescribeStream
    - kinesis:ListStreams
    - kinesis:PutRecord
    - kinesis:PutRecords
    Resource:
      Fn::GetAtt: 
      - eventStream
      - Arn
  # Grant privilege to write to events table 
  - Effect: Allow
    Action:
    - dynamodb:*
    Resource:
      Fn::GetAtt: 
      - eventsTable
      - Arn     

custom:
  DB_NAME: cloudbash
  USERNAME: master
  PASSWORD: password
  POSTGRESQL:
    HOST:
      Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Address]
    PORT:
      Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Port]
  scripts:
    commands:
      hello: echo Hello from ${self:service} service!
    hooks:
      'deploy:finalize': serverless invoke --function dbInit -d

package:
  artifact: bin/release/netcoreapp2.1/deploy-package.zip

functions:
  createConcert:
    handler: Cloudbash.Lambda::Cloudbash.Lambda.Functions.Concerts.CreateConcertFunction::Run
    events:
    - http:
        path: concerts
        method: post
        cors: true

  ## lambda for catching events from the eventstream (kinesis)
  eventStreamHandler:
    handler: Cloudbash.Lambda::Cloudbash.Lambda.Events.Functions.EventProcessorFunction::Run
  # lambda for initiliazing the database on deployment
  dbInit:
    handler: Cloudbash.Lambda::Cloudbash.Lambda.Functions.Util.DatabaseInitializerFunction::Run

# Resources
resources:
  Resources:

    # create the Kinesis EventStream
    eventStream: 
      Type: AWS::Kinesis::Stream
      Properties: 
        Name: eventStream
        ShardCount: 1

    Event:
      Type: AWS::Lambda::EventSourceMapping
      Properties:
        BatchSize: 50
        EventSourceArn:
          Fn::GetAtt:
            - eventStream
            - Arn      
        FunctionName:
          Fn::GetAtt:
            - EventStreamHandlerLambdaFunction
            - Arn
        StartingPosition: TRIM_HORIZON

    # creat the eventlog
    eventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: EventLog
        AttributeDefinitions:
          - AttributeName: Id
            AttributeType: S
        KeySchema:
          - AttributeName: Id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    # create the Amazon RDS PostgreSQL Database
    PostgreSqlRDSInstance:
        Type: AWS::RDS::DBInstance
        Properties:
          MasterUsername: ${self:custom.USERNAME}
          MasterUserPassword: ${self:custom.PASSWORD}
          AllocatedStorage: 20
          DBName: ${self:custom.DB_NAME}
          DBInstanceClass: db.t2.micro
          Engine: postgres
          PubliclyAccessible: true
    


plugins:
  - serverless-plugin-scripts