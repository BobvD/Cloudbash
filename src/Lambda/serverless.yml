service: cloudbash


provider:
  name: aws
  runtime: dotnetcore2.1
  stage: dev
  region: us-east-1
  environment:   
    POSTGRESQL_HOST: ${self:custom.POSTGRESQL.HOST}
    POSTGRESQL_PORT: ${self:custom.POSTGRESQL.PORT}
    REDIS_HOST: ${self:custom.REDIS.HOST}
      

  iamRoleStatements:
  # Grant privileges to read from kinesis stream
  - Effect: Allow
    Action:
    - kinesis:GetRecords
    - kinesis:GetShardIterator
    - kinesis:DescribeStream
    - kinesis:ListStreams
    - kinesis:PutRecord
    - kinesis:PutRecords
    Resource:
      Fn::GetAtt: 
      - eventStream
      - Arn
  # Grant privilege to write to events table 
  - Effect: Allow
    Action:
    - dynamodb:*
    Resource:
      Fn::GetAtt: 
      - eventStore
      - Arn     

custom:
  DB_NAME: cloudbash
  USERNAME: master
  PASSWORD: password
  POSTGRESQL:
    HOST: 
        Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Address]
    PORT: 
        Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Port]
  REDIS:
    HOST: 
        Fn::GetAtt: [ElasticCacheCluster, RedisEndpoint.Address]  

  scripts:
    commands:
      hello: echo Hello from ${self:service} service!
    hooks:
      'deploy:finalize': serverless invoke --function dbInit -d

package:
  artifact: bin/release/netcoreapp2.1/deploy-package.zip

functions:

  ## Concert Endpoints
  createConcert:
    handler: Cloudbash.Lambda::Cloudbash.Lambda.Functions.Concerts.CreateConcertFunction::Run
    events:
    - http:
        path: concerts
        method: post
        cors: true
  getConcerts:
    handler: Cloudbash.Lambda::Cloudbash.Lambda.Functions.Concerts.GetConcertsFunction::Run
    events:
    - http:
        path: concerts
        method: get
        cors: true

  deleteConcert:
    handler: Cloudbash.Lambda::Cloudbash.Lambda.Functions.Concerts.DeleteConcertFunction::Run
    events:
      - http:
          path: concerts/{id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                id: true

  preSignUp:
    handler: Cloudbash.Lambda::Cloudbash.Lambda.Functions.Users.PreSignUpFunction::Run
    events:
    - cognitoUserPool:
        pool: Cloudbash
        trigger: PreSignUp
        existing: true

  postAuthentication:
    handler: Cloudbash.Lambda::Cloudbash.Lambda.Functions.Users.PostAuthenticationFunction::Run
    events:
    - cognitoUserPool:
        pool: Cloudbash
        trigger: PostAuthentication
        existing: true

  postConfirmation:
    handler: Cloudbash.Lambda::Cloudbash.Lambda.Functions.Users.PostConfirmationFunction::Run
    events:
    - cognitoUserPool:
        pool: Cloudbash
        trigger: PostConfirmation
        existing: true

  ## lambda for catching events from the eventstream (kinesis)
  eventStreamHandler:
    handler: Cloudbash.Lambda::Cloudbash.Lambda.Events.Functions.EventProcessorFunction::Run

  # lambda for initiliazing the database on deployment
  dbInit:    
    handler: Cloudbash.Lambda::Cloudbash.Lambda.Functions.Util.DatabaseInitializerFunction::Run
    timeout: 180

# Resources
resources:
  Resources:

    # Cognito User Pool
    CloudbashCognitoUserPool: ${file(./resource/CognitoUserPool.yml)}
    # Cognito Client - lambda
    CloudbashCognitoUserPoolClient: ${file(./resource/CognitoUserPoolClient.yml)}
    # Cognito Client - Angular
    CloudbashCognitoUserPoolClientWeb: ${file(./resource/CognitoUserPoolClientWeb.yml)}

    # Internet Gateway
    CloudbashInternetGateway: ${file(./resource/InternetGateway.yml)}

    # Virtual Private Cloud
    CloudbashVPC: ${file(./resource/VPC.yml)}
    CloudbashVPCGA: ${file(./resource/VPCGA.yml)}

    # Subnets
    CloudbashSubnetA: ${file(./resource/SubnetA.yml)}
    CloudbashSubnetB: ${file(./resource/SubnetB.yml)}
    CloudbashSubnetC: ${file(./resource/SubnetC.yml)}

    # Subnet Group
    CloudbashRDSSubnetGroup: ${file(./resource/RDSSubnetGroup.yml)}

    # Security Group
    CloudbashSecurityGroup: ${file(./resource/SecurityGroup.yml)}
    
    # Routing
    RouteTablePublic: ${file(./resource/RouteTablePublic.yml)}
    RoutePublic: ${file(./resource/RoutePublic.yml)}
    RouteTableAssociationSubnetA: ${file(./resource/RouteTableAssociationSubnetA.yml)}
    RouteTableAssociationSubnetB: ${file(./resource/RouteTableAssociationSubnetB.yml)}
    RouteTableAssociationSubnetC: ${file(./resource/RouteTableAssociationSubnetC.yml)}
    
    CloudbashStorageSecurityGroup : ${file(./resource/StorageSecurityGroup.yml)}

    # POSTGRESQL RDS Database
    PostgreSqlRDSInstance: ${file(./resource/PostgresSQL.yml)}

    ## ELASTICACHE
    CloudbashElasticacheSubnetGroup: ${file(./resource/ElastiCacheSubnetGroup.yml)}
    ElasticCacheCluster: ${file(./resource/ElastiCacheCluster.yml)}

    # create the Kinesis EventStream
    eventStream: 
      Type: AWS::Kinesis::Stream
      Properties: 
        Name: eventStream
        ShardCount: 1

    Event:
      Type: AWS::Lambda::EventSourceMapping
      Properties:
        BatchSize: 50
        EventSourceArn:
          Fn::GetAtt:
            - eventStream
            - Arn      
        FunctionName:
          Fn::GetAtt:
            - EventStreamHandlerLambdaFunction
            - Arn
        StartingPosition: TRIM_HORIZON

    # creat the eventlog
    eventStore:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: EventStore
        AttributeDefinitions:
          - AttributeName: AggregateId
            AttributeType: S
          - AttributeName: AggregateVersion
            AttributeType: N
        KeySchema:
          - AttributeName: AggregateId
            KeyType: HASH
          - AttributeName: AggregateVersion
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

plugins:
  - serverless-plugin-scripts