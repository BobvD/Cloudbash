service: cloudbash-dynamodb

provider:
  name: aws
  runtime: dotnetcore3.1
  stage: dev
  region: us-east-1
  iamRoleStatements:
    # Grant privilege to write to events table 
    - Effect: Allow
      Action:
      - dynamodb:*
      Resource:
        Fn::GetAtt: 
        - eventStore
        - Arn  
    - Effect: Allow
      Action:
      - dynamodb:*
      Resource:
        Fn::GetAtt: 
        - readDatabase
        - Arn 
  environment:   
    ServerlessConfiguration__EventBus: 'DYNAMO'
    ServerlessConfiguration__BucketName: ${self:custom.S3_BUCKET_NAME}
    ServerlessConfiguration__Database: 'DYNAMO'
    ServerlessConfiguration__EventStoreTableName: ${self:custom.EVENT_STORE_NAME}  

custom:
  EVENT_STORE_NAME: EventStore_config3
  S3_BUCKET_NAME: cb-c3
  
functions:
  # Concert Endpoints
  createConcert: ${file(./serverless/functions/concerts/create.yml)}
  getConcerts: ${file(./serverless/functions/concerts/get.yml)}
  deleteConcert: ${file(./serverless/functions/concerts/delete.yml)} 
  # Cognito Triggers
  preSignUp: ${file(./serverless/functions/cognito/pre_signup.yml)} 
  postAuthentication: ${file(./serverless/functions/cognito/post_authentication.yml)} 
  postConfirmation: ${file(./serverless/functions/cognito/post_confirmation.yml)} 
  # Venue Endpoints
  createVenue: ${file(./serverless/functions/venues/create.yml)}
  # File Endpoints
  uploadFile: ${file(./serverless/functions/files/upload.yml)}
  getFileUploadUrl: ${file(./serverless/functions/files/get_s3_url.yml)}
   
  # Eventstream Handler
  eventStreamHandler:
    handler: Cloudbash.Lambda::Cloudbash.Lambda.Events.Functions.DynamoDBEventProcessorFunction::Run
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - eventStore
              - StreamArn
          batchSize: 1

resources:
  Resources:
    # Event Store = DynamoDB
    eventStore: ${file(./serverless/resources/DynamoDBEventStore.yml)}
    readDatabase:  ${file(./serverless/resources/DynamoDBReadDB.yml)}
    # S3 BUcket
    bucket: ${file(./serverless/resources/S3Bucket.yml)}

package:
  artifact: bin/release/netcoreapp3.1/deploy-package.zip